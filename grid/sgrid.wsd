@startuml White
set namespaceSeparator ::


class Dune::SElement<int dim, int dimworld> {
- SElement()
+ ElementType type()
+ int corners()
+ Vec<dimworld> &operator[](int i)
+ SElement<dim, dim> &refelem()
+ Vec<dimworld> global(Vec<dim> local)
+ Vec<dim> local(Vec<dimworld> global)
}


class Dune::SElement1 <1, int dimworld> {
- Vec<dimworld> s
- Mat<dimworld, 2> A
- Vec<dimworld> c[1 << 2]
+ ElementType type()
+ int corners()
+ Vec<dimworld> &operator[](int i)
+ SElement<1, 1> &refelem()
+ Vec<dimworld> global(Vec<dim> local)
+ Vec<1> local(Vec<dimworld> global)
+ SElement(const Vec<dimworld> &s_, Vec<dimworld> r_[1])
+ SElement(const Vec<dimworld> &s_, const Vec<dimworld> &r0)
+ SElement() {}
}


class Dune::SElement3 <3, int dimworld> {
- Vec<dimworld> s
- Mat<dimworld, 3> A
- Vec<dimworld> c[1 << 3]
+ ElementType type()
+ int corners()
+ Vec<dimworld> &operator[](int i)
+ SElement<3, 3> &refelem()
+ Vec<dimworld> global(Vec<dim> local)
+ Vec<3> local(Vec<dimworld> global)
+ SElement(const Vec<dimworld> &s_, Vec<dimworld> r_[3])
+ SElement(const Vec<dimworld> &s_, const Vec<dimworld> &r0, const Vec<dimworld> &r1, const Vec<dimworld> &r2)
+ SElement() {}
}


class Dune::SEntity <int codim, int dim, int dimworld> {
+ int level()
+ int index()
+ SElement<dim - codim, dimworld> geometry()
+ template <int d, int dd>
        class Element : public SElement<d, dd>
}


class Dune::SEntity0 <0, int dim, int dimworld> {
+ class HierarchicIterator
+ class NeighborIterator
+ int level()
+ int index()
+ SElement<dim, dimworld> geometry()
+ template <int cc>
        int count()
+ template <int cc>
        SLevelIterator<cc, dim, dimworld> entity(int i)
+ NeighborIterator nbegin()
+ NeighborIterator nend()
+ SLevelIterator<0, dim, dimworld> father()
+ SElement<dim, dim> father_relative_local()
+ HierarchicIterator hbegin(int maxlevel)
+ HierarchicIterator hend(int maxlevel)
+ template <int cc>
        class LevelIterator : public SLevelIterator<cc, dim, dimworld>
+ template <int d, int dd>
        class Element : public SElement<d, dd>
- SElement<d, dd> &asBase()
}


class Dune::SEntity0::HierarchicIterator{
+ HierarchicIterator operator++()
+ HierarchicIterator operator++(int i)
+ bool operator==(const HierarchicIterator &i) const
+ bool operator!=(const HierarchicIterator &i) const
+ SEntity<0, dim, dimworld> &operator*()
+ SEntity<0, dim, dimworld> *operator->()
- SEntity<0, dim, dimworld> virtual_element
}

class Dune::SEntity0::NeighborIterator{
+ NeighborIterator operator++()
+ NeighborIterator operator++(int i)
+ bool operator==(const NeighborIterator &i) const
+ bool operator!=(const NeighborIterator &i) const
+ SEntity<0, dim, dimworld> &operator*()
+ SEntity<0, dim, dimworld> *operator->()
+ SElement<dim - 1, dim> intersection_self_local()
+ SElement<dim - 1, dimworld> intersection_self_global()
+ int number_in_self()
+ SElement<dim - 1, dim> intersection_neighbor_local()
+ SElement<dim - 1, dimworld> intersection_neighbor_global()
+ int number_in_neighbor()
- SEntity<0, dim, dimworld> virtual_element
}



class Dune::SEntity1 <int dim, int dim, int dimworld> {
+ int level()
+ int index()
+ SElement<0, dimworld> geometry()
+ SLevelIterator<0, dim, dimworld> father()
+ Vec<dim> local()
+ template <int d, int dd>
        class Element : public SElement<d, dd>
+ template <int cc>
        class LevelIterator : public SLevelIterator<cc, dim, dimworld> 
}


class Dune::SLevelIterator<int codim, int dim, int dimworld>{
+ SLevelIterator<codim, dim, dimworld> operator++()
+ SLevelIterator<codim, dim, dimworld> operator++(int i)
+ bool operator==(const SLevelIterator<codim, dim, dimworld> &i) const
+ bool operator!=(const SLevelIterator<codim, dim, dimworld> &i) const
+ SEntity<codim, dim, dimworld> &operator*()
+ SEntity<codim, dim, dimworld> *operator->()
- SEntity<codim, dim, dimworld> virtual_element
}


class Dune::SGrid<int dim, int dimworld>{
+ SGrid(double H_, int N0_, int L_)
+ int maxlevel()
+ template <int codim>
        SLevelIterator<codim, dim, dimworld> lbegin(int level)
+ template <int codim>
        SLevelIterator<codim, dim, dimworld> lend(int level)
+ int size(int level, int codim)
+ template <int codim>
        class LevelIterator : public SLevelIterator<codim, dim, dimworld>
+ template <int codim>
        class Entity : public SEntity<codim, dim, dimworld>
- double H
- int N0
- int L
}



Dune::SElement1 .up.>  Dune::SElement
Dune::SElement3 .up.>  Dune::SElement

Dune::SEntity0 .up.> Dune::SEntity
Dune::SEntity1 .up.> Dune::SEntity

Dune::SEntity0::HierarchicIterator .up.> Dune::SEntity0
Dune::SEntity0::NeighborIterator .up.> Dune::SEntity0

@enduml
